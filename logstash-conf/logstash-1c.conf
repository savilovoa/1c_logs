input {
    file {
    codec => multiline {
      pattern => "^{%{DATESTAMP_EVENTLOG}"
      what => "previous"
      negate => true
    }
    path => "d:\Prog\1C\1C_logs/erp_factory/1Cv8Log/*.lgp"
    ignore_older => "432000"
    #sincedb_path => "/etc/logstash/file_input_tracking/erp_factory.sincedb"
    start_position => "beginning"
    stat_interval => 120
    type => "erp_factory"
  }
}

filter {
  mutate {
    gsub => ["message","\n",""]
    gsub => ["message","\r",""]
  }
  mutate {
    remove_field => [ "host", "@version", "@timestamp" ]
    rename => [ "type", "Database" ]
  }
 # ruby {
 #     code => "
 #         event.set('raw_log_file',event.get('path').split('/')[-1].gsub('.lgp','').slice(0..7))
 #     "
  #}
  grok {
# U
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{DATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\"},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# S
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{DATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",\\"%{DATA:Data1}\\"},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# R
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",%{INT:ID}:%{GREEDYDATA:GUID}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# P 1
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",{1,%{GREEDYDATA:Data1}}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# P 2
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",{2,%{GREEDYDATA:Data1}}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# P 6
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",{6,{%{GREEDYDATA:Data1}},{%{GREEDYDATA:Data2}}}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
  }
  date {
    match => [ "Date", "yyyyMMddHHmmss" ]
    target => "@timestamp"
    remove_field => [ "message", "Date", "path" ] 
  }
  translate {
    field => "[UserId]"
    destination => "[User]"
    dictionary_path => "d:\Prog\logstash\config\custom_mapping_1C\erp_factory_UserId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
}

output {
  file { path => "d:\debug.log" }
}
